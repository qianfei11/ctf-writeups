#!/usr/bin/env python
import gmpy2
import libnum

def PollardRho_p_1(N):
    a = i = 2
    while 1:
        a = gmpy2.powmod(a, i, N)
        d = gmpy2.gcd(a - 1, N)
        if d != 1:
            return d
        i += 1

def Fermat(n):
    a = gmpy2.isqrt_rem(n)[0]+1
    b = a ** 2 - n
    while 1:
        q = gmpy2.isqrt_rem(b)
        if q[1] == 0:
            return a - q[0]
        a += 1
        b = a ** 2 - n

def Cal(n):
    p = int(round(gmpy2.sqrt(n)))
    while True:
        q = n / p
        if p * q == n:
            return p
        p += 1

n = 50142032499469550407421604706771611415193641755639270667473328045908799316205905505167271138079522738272643811917325451177986948493659090203974349370248583120022500722759239305447823602875823849366662503027591858371125301505134216095903796534740686834236150999
p = Cal(n)
q = n / p
e = 65537
c = 45005399504992587510006608300548120810512973768886391125598523343330913326304417790989607300367232977960116381108873363343598357102136548218343380795022179607741940866191404186680657699739176842869814452906110393321567314747096161480003824583613027819960172221

d = gmpy2.invert(e, (p - 1) * (q - 1))
print d
m = gmpy2.powmod(c, d, n)
print m
flag = libnum.n2s(m)
print flag

